{"version":3,"sources":["selectors/selectors.ts","styles/create-theme.ts","constants/constants.ts","components/layout/Page/Page.tsx","components/SignIn/SignIn.tsx","actions/actions.ts","animations/shake-animation.tsx","components/pages/AuthPage.tsx","components/pages/Todo/Todo.tsx","App.tsx","reducers/loginReducer.ts","reducers/usernameErrorReducer.ts","reducers/pwErrorReducer.ts","reducers/index.ts","store/store.ts","index.tsx"],"names":["getLoginStatusSelector","state","isLoggedIn","getUsernameStatusSelector","usernameInfo","getPasswordStatusSelector","pwInfo","darkTheme","theme","createTheme","palette","type","primary","main","secondary","typography","fontFamily","BEB_CREDENTIALS","openDeadlineReminder","deadline","Date","today","compareAsc","alert","daysLeft","differenceInDays","format","LOGIN","USERNAME","PASSWORD","useStyles","makeStyles","root","display","flexDirection","justifyContent","alignItems","minWidth","minHeight","Page","children","classes","Container","className","component","textAlign","padding","borderRadius","avatar","margin","marginBottom","spacing","backgroundColor","light","cardActions","form","gap","SignIn","props","frameClass","dispatch","useDispatch","animate","useSelector","validateLoginStatus","username","pw","validateUsernameFieldState","errorMsg","validatePasswordFieldState","Card","variant","CardContent","Avatar","fontSize","Typography","CardActions","noValidate","onSubmit","event","preventDefault","userFieldTouched","pwFieldTouched","autoComplete","TextField","id","label","onChange","value","target","error","usernameIsValid","helperText","required","password","pwIsValid","Button","color","disableElevation","styles","StyleSheet","create","headShake","animationName","animationDuration","ShakeAnimationSignIn","Component","useState","shouldShake","setShouldShake","isFirstRender","useRef","useEffect","current","setTimeout","shakeComponent","useCallback","css","makeShakeValidationErrorAnimation","AuthPage","onClick","generateListItem","item","ListItem","divider","ListItemText","key","task","TodoPage","List","map","App","console","log","ThemeProvider","CssBaseline","Todo","loginReducer","action","intialState","usernameErrorReducer","pwErrorReducer","rootReducer","combineReducers","store","configureStore","reducer","middleware","getDefaultMiddleware","concat","logger","devTools","process","ReactDOM","render","document","getElementById"],"mappings":"uJAGaA,EAAyB,SAACC,GAAD,OAAmCA,EAAMC,YAElEC,EAA4B,SAACF,GAAD,OAAsCA,EAAMG,cAExEC,EAA4B,SAACJ,GAAD,OAAsCA,EAAMK,Q,SCF/EC,EACO,UADPA,EAKS,UAyBAC,EAfDC,YAAY,CACtBC,QAAS,CACLC,KAAM,OACNC,QAAS,CACLC,KAAMN,GAEVO,UAAW,CACPD,KAAMN,IAGdQ,WAAY,CACRC,WAhBQ,8B,6CCXHC,EACL,OADKA,EAEP,YAGOC,EAAuB,WAClC,IAAMC,EAAW,IAAIC,KAAK,KAAM,EAAG,IAC7BC,EAAQ,IAAID,KAElB,GAAoC,IAAhCE,YAAWH,EAAUE,GACvBE,MAAM,qCACD,CACL,IAAMC,EAAWC,YAAiBN,EAAUE,GAC5CE,MAAM,6BAAD,OAC0BG,YAC3BP,EAjBmB,cAelB,yBAIeK,EAJf,kBAUIG,EAEI,gBAFJA,EAGC,aAIDC,EACC,aADDA,EAEK,iBAFLA,EAGO,mBAHPA,EAIQ,oBAIRC,EACD,WADCA,EAEK,iBAFLA,EAGO,mBAHPA,EAIY,wB,yBCtCnBC,EAAYC,YAAW,CACzBC,KAAM,CACFC,QAAS,OACTC,cAAe,SACfC,eAAgB,SAChBC,WAAY,SACZC,SAAU,QACVC,UAAW,WAiBJC,EATF,SAAC,GAAqC,IAAnCC,EAAkC,EAAlCA,SACNC,EAAUX,IAChB,OACI,cAACY,EAAA,EAAD,CAAWC,UAAWF,EAAQT,KAAMY,UAAU,UAA9C,SACKJ,K,yFCYPV,E,MAAYC,IAAW,SAACvB,GAAD,MAAY,CACrCwB,KAAM,CACFK,SAAU,IACVQ,UAAW,SACXC,QAAS,YACTC,aAAc,GACdd,QAAS,OACTC,cAAe,UAEnBc,OAAQ,CACJC,OAAQ,OACRC,aAAc1C,EAAM2C,QAAQ,GAC5BC,gBAAiB5C,EAAME,QAAQI,UAAUuC,OAE7CC,YAAa,CACTrB,QAAS,OACTE,eAAgB,SAChBC,WAAY,UAEhBmB,KAAM,CACFtB,QAAS,OACTC,cAAe,SACfsB,IAAK,QAgIEC,EA5HA,SAACC,GAEZ,IAAIjB,EAAUX,IACN6B,EAAeD,EAAfC,WAGFC,EAAWC,cAGTC,EAAYJ,EAAZI,QAGF1D,EAAe2D,YAAY5D,GAC3BG,EAASyD,YAAY1D,GA0BrB2D,EAAsB,WAOpB5D,EAAa6D,WAAahD,GAAwBX,EAAO4D,KAAOjD,EAChE2C,EC3GuB,CAC/BjD,KAAMgB,KD4GMmC,GAASA,IACbF,EC1GoB,CAC5BjD,KAAMgB,MD6GAwC,EAA6B,WAE3B/D,EAAa6D,WAAahD,EAC1B2C,EC3G6B,CACrCjD,KAAMiB,ID4GEgC,ECzG0C,CAClDjD,KAAMiB,EACNwC,SD4DsB,4BA+ChBC,EAA6B,WAC3B/D,EAAO4D,KAAOjD,EACd2C,EC3F6B,CACrCjD,KAAMkB,ID4FE+B,ECzF0C,CAClDjD,KAAMkB,EACNuC,SDqCgB,gDAkEhB,OACI,eAACE,EAAA,EAAD,CAAM3B,UAAWF,EAAQT,KAAR,WAAmB2B,GAA0B,IAAMY,QAAQ,WAA5E,UACI,eAACC,EAAA,EAAD,WAEI,cAACC,EAAA,EAAD,CAAQ9B,UAAWF,EAAQO,OAA3B,SACI,cAAC,IAAD,CAAkB0B,SAAS,YAG/B,cAACC,EAAA,EAAD,CAAYJ,QAAQ,KAApB,sBAMJ,cAACK,EAAA,EAAD,CAAajC,UAAWF,EAAQa,YAAhC,SACI,uBAAMX,UAAWF,EAAQc,KAAMsB,YAAU,EAACC,SA9E5B,SAACC,GACvBA,EAAMC,iBAID5E,EAAa6E,kBAAkBrB,EC7DF,CACtCjD,KAAMiB,ID6DGtB,EAAO4E,gBAAgBtB,EC3CU,CAC1CjD,KAAMkB,ID6CFmC,IAEAG,IAEAE,KAiE+Ec,aAAa,MAApF,UACI,cAACC,EAAA,EAAD,CACIC,GAAG,WACHd,QAAQ,WACRe,MAAM,eACNC,SA5BK,SAAC,GAA0D,IAA9CC,EAA6C,EAAvDC,OAAUD,MAClC5B,ECrH0C,CAC9CjD,KAAMiB,EACNqC,SDmHyBuB,KA4BLE,OAAQtF,EAAauF,iBAAmBvF,EAAa6E,iBACrDW,WAAU,OAAExF,QAAF,IAAEA,OAAF,EAAEA,EAAcgE,SAC1ByB,UAAQ,IACZ,cAACT,EAAA,EAAD,CACIC,GAAG,WACHd,QAAQ,WACRe,MAAM,WACNC,SAhCK,SAAC,GAA0D,IAA9CC,EAA6C,EAAvDC,OAAUD,MAClC5B,EC/G0C,CAC9CjD,KAAMkB,EACNiE,SD6GyBN,KAgCLE,OAAQpF,EAAOyF,WAAazF,EAAO4E,eACnCU,WAAU,OAAEtF,QAAF,IAAEA,OAAF,EAAEA,EAAQ8D,SACpByB,UAAQ,IACZ,cAACG,EAAA,EAAD,CAAQzB,QAAQ,YAAY0B,MAAM,UAAUtF,KAAK,SAASuF,kBAAgB,EAA1E,oC,kCE7KdC,EAASC,IAAWC,OAAO,CAC7BC,UAAW,CACPC,cAAeD,YACfE,kBAAmB,QCUrBC,GDSoC,SAACC,GAMvC,OAAO,SAAChD,GAAe,MAKmBiD,oBAAS,GAL5B,mBAKZC,EALY,KAKCC,EALD,KAMbC,EAAgBC,kBAAO,GAE7BC,qBAAU,WAOFF,EAAcG,QACdH,EAAcG,SAAU,EAMxBL,GACAM,YAAW,WACPL,GAAe,KA7CF,OAiDtB,CAACD,IAEJ,IAAMO,EAAiBC,uBAAY,WAM/BP,GAAe,KAChB,IAEH,OACI,cAACH,EAAD,2BACQhD,GADR,IAEII,QAASqD,EACTxD,WAAYiD,EAAcS,YAAIlB,EAAOG,WAAc,OC1DtCgB,CAAkC7D,GAWhD8D,GATE,SAAC7D,GACd,OACI,eAAC,EAAD,WACI,cAAC+C,GAAD,IACA,cAACT,EAAA,EAAD,CAAQwB,QAAStG,EAAsBqD,QAAQ,YAAY0B,MAAM,YAAjE,4B,mDChBNwB,GAAmB,SAACC,GACtB,OACI,cAACC,GAAA,EAAD,CAAyBC,SAAO,EAAhC,SACI,cAACC,GAAA,EAAD,CACIjH,QAAO,eAAU8G,EAAKI,KACtBhH,UAAW4G,EAAKK,QAHTL,EAAKI,MAuCbE,GAzBE,SAACtE,GAgBd,OACI,cAAC,EAAD,UACI,cAACuE,GAAA,EAAD,UACKC,KAlBgB,CACzB,CACIJ,IAAK,IACLC,KAAM,2DAEV,CACID,IAAK,IACLC,KAAM,0JAEV,CACID,IAAK,IACLC,KAAM,qFAOaN,SCFhBU,OA5Bf,WAAe,IAMLjI,EAAe6D,YAAY/D,GAA3BE,WAIR,OAFAkI,QAAQC,IAAI,YAGV,eAACC,EAAA,EAAD,CAAe9H,MAAOA,EAAtB,UACE,cAAC+H,EAAA,EAAD,KACErI,GAAc,cAAC,GAAD,IACfA,GAAc,cAACsI,GAAD,Q,uCCNNC,GApBM,WAGf,IAFJxI,EAEG,uDAFkB,CAAEC,YAAY,GACnCwI,EACG,uCACH,OAAQA,EAAO/H,MACb,KAAKgB,EACH,OAAO,2BACF1B,GADL,IAEEC,YAAY,IAEhB,KAAKyB,EACH,OAAO,2BACF1B,GADL,IAEEC,YAAY,IAEhB,QACE,OAAOD,ICfP0I,GAA8B,CAChC1E,SAAU,GACV0B,iBAAiB,EACjBvB,SAAU,GACVa,kBAAkB,GAgCP2D,GA7Bc,WAAuD,IAAtD3I,EAAqD,uDAA7B0I,GAAaD,EAAgB,uCAC/E,OAAQA,EAAO/H,MACX,KAAKiB,EACD,OAAO,2BACA3B,GADP,IAEI0F,gBAAiB1E,IAAyBhB,EAAMgE,SAChDG,SAAU,KAElB,KAAKxC,EACD,OAAO,2BACA3B,GADP,IAEI0F,gBAAiB1E,IAAyBhB,EAAMgE,SAChDG,SAAUsE,EAAOtE,WAEzB,KAAKxC,EACD,OAAO,2BACA3B,GADP,IAEIgE,SAAUyE,EAAOzE,WAEzB,KAAKrC,EACD,OAAO,2BACA3B,GADP,IAEIgF,kBAAkB,IAE1B,QACI,OAAOhF,IC/Bb0I,GAA8B,CAChCzE,GAAI,GACJ6B,WAAW,EACX3B,SAAU,GACVc,gBAAgB,GAgCL2D,GA7BQ,WAAuD,IAAtD5I,EAAqD,uDAA7B0I,GAAaD,EAAgB,uCACzE,OAAQA,EAAO/H,MACX,KAAKkB,EACD,OAAO,2BACA5B,GADP,IAEI8F,UAAW9E,IAAuBhB,EAAMiE,GACxCE,SAAU,KAElB,KAAKvC,EACD,OAAO,2BACA5B,GADP,IAEI8F,UAAW9E,IAAuBhB,EAAMiE,GACxCE,SAAUsE,EAAOtE,WAEzB,KAAKvC,EACD,OAAO,2BACA5B,GADP,IAEIiE,GAAIwE,EAAO5C,WAEnB,KAAKjE,EACD,OAAO,2BACA5B,GADP,IAEIiF,gBAAgB,IAExB,QACI,OAAOjF,ICxBJ6I,GAPKC,aAAgB,CAChC7I,WAAYuI,GACZrI,aAAcwI,GACdtI,OAAQuI,KCUZ,IAIeG,GAdCC,aAAe,CAC3BC,QAASJ,GACTK,WAAY,SAACC,GAAD,OACVA,IAAuBC,OAAOC,OAChCC,UAAUC,ICNdC,IAASC,OACP,cAAC,IAAD,CAAUV,MAAOA,GAAjB,SACE,cAAC,GAAD,MAEFW,SAASC,eAAe,W","file":"static/js/main.522a2d92.chunk.js","sourcesContent":["import { RootState } from \"store/store\";\nimport { USERNAME_STATE, PASSWORD_STATE, LOGIN_STATE } from \"types/types\";\n\nexport const getLoginStatusSelector = (state: RootState): LOGIN_STATE => state.isLoggedIn; // return latest login state\n\nexport const getUsernameStatusSelector = (state: RootState): USERNAME_STATE => state.usernameInfo; // return latest username-related information\n\nexport const getPasswordStatusSelector = (state: RootState): PASSWORD_STATE => state.pwInfo; // return latest password-related information\n","import { createTheme } from \"@material-ui/core/styles\";\n\n// Refer to below site for picking theme colors\n// https://material.io/design/color/the-color-system.html#tools-for-picking-colors\n\nconst darkTheme = {\n    primary: \"#7E57C2\",\n    complementary: \"#9bc257\",\n    analogousOne: \"#5765c2\",\n    analogousTwo: \"#b457c2\",\n    tradicOne: \"#c2579b\",\n    tradicTwo: \"#c27e57\"\n}\n\nconst fontFams = {\n    montserrat: \"'Montserrat', sans-serif\",\n    azeretMono: \"'Azeret Mono', monospace\",\n    roboto: \"'Roboto', sans-serif;\"\n};\n\nconst theme = createTheme({\n    palette: {\n        type: \"dark\",\n        primary: {\n            main: darkTheme.primary\n        },\n        secondary: {\n            main: darkTheme.tradicOne\n        }\n    },\n    typography: {\n        fontFamily: fontFams.montserrat\n    }\n})\n\nexport default theme;","import { format, differenceInDays, compareAsc } from \"date-fns\";\n\nexport const DATE_FORMAT = \"dd-MM-yyyy\";\n\nexport const BEB_CREDENTIALS = {\n  user: \"edna\",\n  pw: \"stealfood\",\n};\n\nexport const openDeadlineReminder = () => {\n  const deadline = new Date(2021, 8, 19); // month is 0-indexed\n  const today = new Date();\n\n  if (compareAsc(deadline, today) !== 1) {\n    alert(\"You passed your deadline boi!\");\n  } else {\n    const daysLeft = differenceInDays(deadline, today);\n    alert(\n      `You have your deadline is ${format(\n        deadline,\n        DATE_FORMAT\n      )} and you have ${daysLeft} days left.`\n    );\n  }\n};\n\n// Actions\nexport const LOGIN = {\n  LOGIN_TRY: \"LOGIN_TRY\",\n  LOGIN_SUCCESS: \"LOGIN_SUCCESS\",\n  LOGIN_FAIL: \"LOGIN_FAIL\",\n};\n\n// Username-related\nexport const USERNAME = {\n  USER_INPUT: \"USER_INPUT\",\n  USERNAME_VALID: \"USERNAME_VALID\",\n  USERNAME_INVALID: \"USERNAME_INVALID\",\n  USERFIELD_TOUCHED: \"USERFIELD_TOUCHED\"\n};\n\n// Pw-related\nexport const PASSWORD = {\n  PW_INPUT: \"PW_INPUT\",\n  PASSWORD_VALID: \"PASSWORD_VALID\",\n  PASSWORD_INVALID: \"PASSWORD_INVALID\",\n  PASSWORDFIELD_TOUCHED: \"PASSWORDFIELD_TOUCHED\"\n};\n","import React from \"react\";\n\n// Layout Components\nimport Container from \"@material-ui/core/Container\";\n\n// Styles\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles({\n    root: {\n        display: \"flex\",\n        flexDirection: \"column\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        minWidth: \"100vw\",\n        minHeight: \"100vh\"\n    }\n})\n\n/**\n * Serves to center all elements in page\n */\n\nconst Page = ({ children }: { children: any} ) => {\n    const classes = useStyles();\n    return (\n        <Container className={classes.root} component=\"section\">\n            {children}\n        </Container>\n    )\n}\n\nexport default Page;","import React from \"react\";\n\n\n// Actions\nimport { loginSuccess, loginFail } from \"actions/actions\"; // login\nimport { setUsername, setUsernameSuccess, setUsernameFail, setUserFieldTouched } from \"actions/actions\"; // username\nimport { setPassword, setPasswordSuccess, setPasswordFail, setPasswordFieldTouched } from \"actions/actions\"; // password\n\n// Selectors\nimport { getUsernameStatusSelector, getPasswordStatusSelector } from \"selectors/selectors\";\n\nimport { useSelector, useDispatch } from \"react-redux\";\n\n\n\n// Common Components\nimport Button from \"@material-ui/core/Button\";\nimport Avatar from \"@material-ui/core/Avatar\";\n\n// From Components\nimport TextField from \"@material-ui/core/TextField\";\n\n// Layout Components\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardActions from \"@material-ui/core/CardActions\";\n\n// Icons\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\n\n// Typography\nimport Typography from \"@material-ui/core/Typography\";\n\n// Styles\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\n\n// Constants\nimport { BEB_CREDENTIALS } from \"constants/constants\";\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        minWidth: 350,\n        textAlign: \"center\",\n        padding: \"30px 30px\",\n        borderRadius: 20,\n        display: \"flex\",\n        flexDirection: \"column\"\n    },\n    avatar: {\n        margin: \"auto\",\n        marginBottom: theme.spacing(2),\n        backgroundColor: theme.palette.secondary.light,\n    },\n    cardActions: {\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\"\n    },\n    form: {\n        display: \"flex\",\n        flexDirection: \"column\",\n        gap: 20\n    }\n}))\n\nconst SignIn = (props: any) => {\n    // Styles\n    let classes = useStyles();\n    const { frameClass } = props; // used as workaround to inherit additional styles from an animation HOC (if any)\n\n    // allows us to query the store\n    const dispatch = useDispatch();\n\n    // Higher Order Component functions\n    const { animate } = props;\n\n    // Form-related information from store\n    const usernameInfo = useSelector(getUsernameStatusSelector);\n    const pwInfo = useSelector(getPasswordStatusSelector);\n\n    // Controls\n    const usernameErrorMsg = `You.. dunno your name?`;\n    const pwErrorMsg = `What the beb like to do to beeb when eatin`;\n\n    // Functions \n    const loginHandlerStore = (event: any) => {\n        event.preventDefault();\n\n        // Fields only considered touched after submit button clicked.\n        // \n        if (!usernameInfo.userFieldTouched) dispatch(setUserFieldTouched());\n        if (!pwInfo.pwFieldTouched) dispatch(setPasswordFieldTouched());\n\n        // Validate Login (this logic needs to be reworked in the future)\n        validateLoginStatus();\n        // Validate username\n        validateUsernameFieldState();\n        // Validate password\n        validatePasswordFieldState();\n    }\n\n    /**\n     * Validations\n     */\n    const validateLoginStatus = () => {\n        /**\n         * TODO: FUTURE PLAN\n         * Find a way to use usernameIsValid and pwIsValid store values instead. \n         * The issue here is that you only set usernameIsValid && pwIsValid = true onSubmit\n         * Therefore, this line of code is unable to get the latest usernameinfo.usernameIsValid & pwInfo.pwIsValid\n         */\n        if (usernameInfo.username === BEB_CREDENTIALS.user && pwInfo.pw === BEB_CREDENTIALS.pw) {\n            dispatch(loginSuccess());\n        } else {\n            if (animate) animate(); // execute animation if higher order function exists. in this project, ONLY login component inherits a shaking animation\n            dispatch(loginFail());\n        }\n    }\n\n    const validateUsernameFieldState = () => {\n\n        if (usernameInfo.username === BEB_CREDENTIALS.user) {\n            dispatch(setUsernameSuccess());\n        } else {\n            dispatch(setUsernameFail(usernameErrorMsg));\n        }\n    }\n\n    const validatePasswordFieldState = () => {\n        if (pwInfo.pw === BEB_CREDENTIALS.pw) {\n            dispatch(setPasswordSuccess());\n        } else {\n            dispatch(setPasswordFail(pwErrorMsg));\n        }\n    }\n\n\n    /**\n     * Form Controls\n     */\n    const onUsernameChange = ({ target: { value } }: { target: { value: string } }) => {\n        dispatch(setUsername(value));\n    }\n\n    const onPasswordChange = ({ target: { value } }: { target: { value: string } }) => {\n        dispatch(setPassword(value));\n    }\n\n    return (\n        <Card className={classes.root + ` ${frameClass ? frameClass : ''}`} variant=\"outlined\">\n            <CardContent>\n                {/* Locked Out Icon */}\n                <Avatar className={classes.avatar}>\n                    <LockOutlinedIcon fontSize=\"large\" />\n                </Avatar>\n                {/* Login Header */}\n                <Typography variant=\"h2\">\n                    Login\n                </Typography>\n            </CardContent>\n\n            {/* Buttons */}\n            <CardActions className={classes.cardActions}>\n                <form className={classes.form} noValidate onSubmit={loginHandlerStore} autoComplete=\"off\">\n                    <TextField\n                        id=\"username\"\n                        variant=\"outlined\"\n                        label=\"Beb username\"\n                        onChange={onUsernameChange}\n                        error={!usernameInfo.usernameIsValid && usernameInfo.userFieldTouched}\n                        helperText={usernameInfo?.errorMsg}\n                        required />\n                    <TextField\n                        id=\"password\"\n                        variant=\"outlined\"\n                        label=\"Beb pass\"\n                        onChange={onPasswordChange}\n                        error={!pwInfo.pwIsValid && pwInfo.pwFieldTouched}\n                        helperText={pwInfo?.errorMsg}\n                        required />\n                    <Button variant=\"contained\" color=\"primary\" type=\"submit\" disableElevation>\n                        Begin Journey\n                    </Button>\n                </form>\n            </CardActions>\n        </Card>\n    )\n}\n\nexport default SignIn;","import { LOGIN } from \"constants/constants\";\nimport { USERNAME } from \"constants/constants\";\nimport { PASSWORD } from \"constants/constants\";\n\n// Login-related\nexport const loginSuccess = () => ({\n    type: LOGIN.LOGIN_SUCCESS,\n});\n\nexport const loginFail = () => ({\n    type: LOGIN.LOGIN_FAIL\n});\n\n\n// Username-related\nexport const setUsernameSuccess = () => ({\n    type: USERNAME.USERNAME_VALID\n})\n\nexport const setUsernameFail = (errorMsg: string) => ({\n    type: USERNAME.USERNAME_INVALID,\n    errorMsg\n})\n\nexport const setUsername = (username: string) => ({\n    type: USERNAME.USER_INPUT,\n    username\n})\n\nexport const setUserFieldTouched = () => ({\n    type: USERNAME.USERFIELD_TOUCHED\n})\n\n// Password-related\nexport const setPassword = (password: string) => ({\n    type: PASSWORD.PW_INPUT,\n    password\n})\n\nexport const setPasswordSuccess = () => ({\n    type: PASSWORD.PASSWORD_VALID\n})\n\nexport const setPasswordFail = (errorMsg: string) => ({\n    type: PASSWORD.PASSWORD_INVALID,\n    errorMsg\n})\n\nexport const setPasswordFieldTouched = () => ({\n    type: PASSWORD.PASSWORDFIELD_TOUCHED\n})","/**\n * Higher Order Component that turns a component into a shaking component\n */\nimport { useState, useEffect, useRef, useCallback } from \"react\"\nimport { headShake } from \"react-animations\";\nimport { StyleSheet, css } from \"aphrodite\";\n\nconst styles = StyleSheet.create({\n    headShake: {\n        animationName: headShake,\n        animationDuration: \"1s\"\n    }\n});\n\nconst ANIMATION_RETRY_DURATION = 1000;\n\n/**\n * TODO!!: Current implementations runs useEffect twice, because it is dependent on shouldShake state.\n * When shouldStake first changes upon shakeComponent func execution,\n * shouldShake changes from false -> true, which initiates a useEffect trigger\n * useEffect then runs a timeout with setShouldStake(false). which causes useEffect to run again because shouldShake changed from true -> false\n * \n * Therefore, useEffect runs twice in this function. \n * TODO: Find a way to ensure that useEffect is not run twice (and therefore prevent your component from re-rendering twice).\n * \n * Currently, the implementation for animation shaking is fine because setTimeout (clearing the CSS class) would only run when shouldShake = true \n */\n\n\nconst makeShakeValidationErrorAnimation = (Component: React.FunctionComponent) => {\n    /**\n     * Execution of this function would create an Higher Order Component that wraps a desired component.\n     * @param {React.FunctionComponent} Component React Component to implement shaking animation on.\n     * @returns {React.FunctionComponent} Component with makeShaking functionality\n     */\n    return (props: any) => {\n        /**\n         * This is the Higher Order Component.\n         */\n\n        const [shouldShake, setShouldShake] = useState(false);\n        const isFirstRender = useRef(true); // keep track of first render. used to prevent callback in useEffect from getting called\n\n        useEffect(() => {\n            /**\n             * useEffect used here to clear CSS animation class\n             * useEffect ends up running twice when shakeComponent executes because 2 setStates are called, and shouldShake goes through 2 state changes.\n             */\n            \n            // Prevent execution of useEffect on first render\n            if (isFirstRender.current) {\n                isFirstRender.current = false; // keep track of first render. now set to false because it is no longer a first render.\n\n                return; // stop execution of rest of useEffect\n            }\n\n            // Only clear css animation class if it has already been applied (shouldShake = true)\n            if (shouldShake) {\n                setTimeout(() => {\n                    setShouldShake(false);\n                }, ANIMATION_RETRY_DURATION);\n            };\n\n        }, [shouldShake]);\n\n        const shakeComponent = useCallback(() => {\n            /**\n             * Pass shake component function down to component\n             * Since the animation is a CSS class, simply setting the same class again would have no effect.\n             * Therefore, a setTimeout is defined here to remove the CSS class so that we can set the \"shouldShake\" class on the component again to activate the animation\n             */\n            setShouldShake(true);\n        }, [])\n\n        return (\n            <Component\n                {...props}\n                animate={shakeComponent}\n                frameClass={shouldShake ? css(styles.headShake ) : \"\"}\n            />)\n    }\n}\n\n\nexport default makeShakeValidationErrorAnimation;","import React from \"react\";\n\n// Constants\nimport { openDeadlineReminder } from \"constants/constants\";\n\n// Components \nimport Page from \"components/layout/Page/Page\";\nimport SignIn from \"components/SignIn/SignIn\"\nimport { Button } from \"@material-ui/core\";\nimport makeShakeValidationErrorAnimation from \"animations/shake-animation\";\n\n/**\n * Page that serves as authentication. Only allows beb to log in\n * Components\n    * Login Form, centered\n* Functions:\n    * Manages login/logout state\n    * \n */\n\nconst ShakeAnimationSignIn = makeShakeValidationErrorAnimation(SignIn);\n\nconst AuthPage = (props: any) => {\n    return (\n        <Page>\n            <ShakeAnimationSignIn />\n            <Button onClick={openDeadlineReminder} variant=\"contained\" color=\"secondary\"> Deadline </Button>\n        </Page>\n    )\n};\n\nexport default AuthPage;","import React from \"react\";\nimport map from \"lodash/map\";\n// Layout\nimport Page from \"components/layout/Page/Page\";\n\n// Material UI Components\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\n\nconst generateListItem = (item: taskItem) => {\n    return (\n        <ListItem key={item.key} divider>\n            <ListItemText\n                primary={`Task ${item.key}`}\n                secondary={item.task}\n            />\n        </ListItem>\n    );\n};\n\ninterface taskItem {\n    key: string;\n    task: string;\n}\n\nconst TodoPage = (props: any) => {\n    const allItems: taskItem[] = [\n        {\n            key: \"1\",\n            task: \"Yesterday was working on AQA and number throttle button\",\n        },\n        {\n            key: \"2\",\n            task: \"Number Button throttle task has been approved, will merge to staging, do the necessary tests on all the affected flows and then create a PR to develop\",\n        },\n        {\n            key: \"3\",\n            task: \"Continue with working on migrating a test case from old webfront to new webfront\",\n        }\n    ];\n\n    return (\n        <Page>\n            <List>\n                {map(allItems, generateListItem)}\n            </List>\n        </Page>\n    );\n};\n\nexport default TodoPage;\n","import React from 'react';\nimport { useSelector } from 'react-redux';\n\n// Selector\nimport { getLoginStatusSelector } from 'selectors/selectors';\n\n// Theme / styles \nimport theme from \"./styles/create-theme\";\nimport { ThemeProvider } from '@material-ui/styles';\nimport { CssBaseline } from \"@material-ui/core\";\n\n// Custom Components\nimport AuthPage from \"components/pages/AuthPage\";\nimport TodoPage from \"components/pages/Todo/Todo\";\n\nfunction App() {\n  /**\n   * Handles Routing of pages \n   * Global styles\n   */\n\n  const { isLoggedIn } = useSelector(getLoginStatusSelector);\n\n  console.log(\"Rendered\");\n\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline/>\n      {!isLoggedIn && <AuthPage />}\n      {isLoggedIn && <TodoPage />}\n      {/* <Page>\n          <header>\n            <h1>App initialized with Typescript and Material UI (not typography element)</h1>\n            <div className=\"w-100 d-flex\">\n              <Button variant=\"contained\" color=\"secondary\" onClick={openDeadlineReminder}>Click Me!</Button>\n            </div>\n          </header>\n      </Page> */}\n    </ThemeProvider>\n\n  );\n}\n\nexport default App;\n","import { LOGIN } from \"constants/constants\";\nimport { LOGIN_STATE } from \"types/types\";\n\nconst loginReducer = (\n  state: LOGIN_STATE = { isLoggedIn: false },\n  action: any\n) => {\n  switch (action.type) {\n    case LOGIN.LOGIN_SUCCESS:\n      return {\n        ...state,\n        isLoggedIn: true,\n      };\n    case LOGIN.LOGIN_FAIL:\n      return {\n        ...state,\n        isLoggedIn: false,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default loginReducer;","import { USERNAME } from \"constants/constants\";\nimport { USERNAME_STATE } from \"types/types\";\nimport { BEB_CREDENTIALS } from \"constants/constants\";\n\nconst intialState: USERNAME_STATE = {\n    username: \"\",\n    usernameIsValid: false,\n    errorMsg: \"\",\n    userFieldTouched: false\n}\n\nconst usernameErrorReducer = (state: USERNAME_STATE = intialState, action: any) => {\n    switch (action.type) {\n        case USERNAME.USERNAME_VALID: \n            return {\n                ...state,\n                usernameIsValid: BEB_CREDENTIALS.user === state.username,\n                errorMsg: \"\"\n            }\n        case USERNAME.USERNAME_INVALID:\n            return {\n                ...state,\n                usernameIsValid: BEB_CREDENTIALS.user === state.username,\n                errorMsg: action.errorMsg\n            }\n        case USERNAME.USER_INPUT:\n            return {\n                ...state,\n                username: action.username\n            }\n        case USERNAME.USERFIELD_TOUCHED:\n            return {\n                ...state,\n                userFieldTouched: true\n            }\n        default:\n            return state;\n    }\n}\n\nexport default usernameErrorReducer;","import { PASSWORD } from \"constants/constants\";\nimport { PASSWORD_STATE } from \"types/types\";\n\nimport { BEB_CREDENTIALS } from \"constants/constants\";\n\nconst intialState: PASSWORD_STATE = {\n    pw: \"\",\n    pwIsValid: false,\n    errorMsg: \"\",\n    pwFieldTouched: false\n}\n\nconst pwErrorReducer = (state: PASSWORD_STATE = intialState, action: any) => {\n    switch (action.type) {\n        case PASSWORD.PASSWORD_VALID:\n            return {\n                ...state,\n                pwIsValid: BEB_CREDENTIALS.pw === state.pw,\n                errorMsg: \"\"\n            }\n        case PASSWORD.PASSWORD_INVALID:\n            return {\n                ...state,\n                pwIsValid: BEB_CREDENTIALS.pw === state.pw,\n                errorMsg: action.errorMsg\n            }\n        case PASSWORD.PW_INPUT:\n            return {\n                ...state,\n                pw: action.password\n            }\n        case PASSWORD.PASSWORDFIELD_TOUCHED:\n            return {\n                ...state,\n                pwFieldTouched: true\n            }\n        default:\n            return state;\n    }\n}\n\nexport default pwErrorReducer;","import { combineReducers } from \"@reduxjs/toolkit\";\n\nimport loginReducer from \"./loginReducer\";\nimport usernameErrorReducer from \"./usernameErrorReducer\";\nimport pwErrorReducer from \"./pwErrorReducer\";\n\nconst rootReducer = combineReducers({\n    isLoggedIn: loginReducer,\n    usernameInfo: usernameErrorReducer,\n    pwInfo: pwErrorReducer\n});\n\n\nexport default rootReducer;","import { configureStore } from \"@reduxjs/toolkit\";\n\n// Middlewares\nimport logger from \"redux-logger\";\n\n// Reducers\nimport rootReducer from \"reducers/index\";\n\nfunction configureAppStore() {\n  const store = configureStore({\n    reducer: rootReducer,\n    middleware: (getDefaultMiddleware) =>\n      getDefaultMiddleware().concat(logger),\n    devTools: process.env.NODE_ENV !== \"production\"\n  });\n\n  return store;\n}\n\nconst store = configureAppStore();\n\nexport type RootState = ReturnType<typeof rootReducer>;\nexport type AppDispatch = typeof store.dispatch;\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nimport store from \"store/store\";\nimport { Provider } from \"react-redux\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}